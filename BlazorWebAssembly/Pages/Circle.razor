@page "/circle"
@page "/c"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="circles">
    @if (nodes == null) {
        <p><em>Loading...</em></p>
    }
    else {
        @for (int i = 0; i < nodes.Length; i++)
        {  
            var index = i;
            <div class="circle">
                <button class="circleButton" @onclick="(() => toggleEdgeList(index))">@nodes[index].title</button>
                <div class="edgeInfo" style=@display[index]>
                    <table class="table">
                    <thead>
                        <tr>
                            <th>References</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- All edges from the node !-->
                        <th>
                            @foreach (var s in (nodeobs[index].edgeToString)) {
                                <tr>@s</tr>
                            }
                        </th>
                    </tbody>
                    </table>

                    <table class="table">
                        <thead>
                        <tr>
                            <th>Is referenced in</th>
                        </tr>
                    </thead>
                    <tbody>
                        <th>
                        <!-- All edges to the node !-->
                            @foreach (var s in (nodeobs[index].edgeFromString)) {
                                <tr>@s</tr>
                            }
                        </th>
                    </tbody>
                    </table>
                </div>
            </div>
        }
    }
</div>

<style>
    .circleButton {
        border-radius: 400px;
        height: 200px;
        width: 200px;
        color: black;
        fill: blue;
        background-color: #2fb7d0;
    }
    .edgeInfo {
        height: 200px;
        width: 200px;
        border-style: solid;
        border-color: black;
    }
    .circles {
        display: grid;
        grid-template-columns: repeat(auto-fill, 12rem);
        grid-gap: 0.5rem;
        justify-content: center;
        padding-left: 0;
        padding-bottom: 5px;
    }

</style>

@code {
    private NodeDTO[]? nodes {get; set;} 
    private List<NodeObject> nodeobs = new List<NodeObject>();
    
    protected override async Task OnInitializedAsync()  
    {
        nodes = await Http.GetFromJsonAsync<NodeDTO[]>("api/Node");
        Console.WriteLine("Nodes were loaded");
        if(nodes != null) {
            foreach(var node in nodes) {
                var nod = new NodeObject(node, Http);
                await nod.makeEdgeList(node);
                nodeobs.Add(nod);
            }
            displayAllNone();
        }

    }
    string color { get; set; } = "#2fb7d0";

    private int index { get; set; } = 0;

    List<string> display = new List<string>();

    private void displayAllNone() {
        foreach(var n in nodes) {
            display.Add("display:none");
        }
    }

    private void toggleEdgeList(int id) {
        if(display[id] == "display:none") {
            display[id] = "display:block";
        } else {
            display[id] = "display:none";
        }
    }
   
   public class NodeObject {
        public NodeDTO nodenode {get;set;}
        public HttpClient Http {get; set;}
        public EdgeDTO[]? edgesTo {get; set;}
        public EdgeDTO[]? edgesFrom {get; set;}

        public List<string> edgeToString {get; set;} = new List<string>();
        public List<string> edgeFromString {get; set; } = new List<string>();
        public List<int> edgeToID {get; set;} = new List<int>();
        public List<int> edgeFromID {get; set;} = new List<int>();

        public NodeObject(NodeDTO nod, HttpClient Htt) {
            nodenode = nod;
            Http = Htt;
        }

        async Task getEdgesTo(NodeDTO node) {
            Console.WriteLine("getEdgesTo was called.");
            var id = node.id;
            var edges = await Http.GetFromJsonAsync<EdgeDTO[]>($"api/Edge/ToNodeId/{id}");
            edgesTo = edges;
        }

        async Task getEdgesFrom(NodeDTO node) {
            Console.WriteLine("getEdgesFrom was called.");
            var id = node.id;
            var edges = await Http.GetFromJsonAsync<EdgeDTO[]>($"api/Edge/FromNodeId/{id}");
            edgesFrom = edges;
        }

        public async Task makeEdgeList(NodeDTO node) {
            await getEdgesFrom(node);
            await getEdgesTo(node);

            foreach(EdgeDTO edge in edgesTo) {
                var nodeID = edge.nodeToID;
                edgeToID.Add(nodeID);
            }

            foreach(EdgeDTO edge in edgesFrom) {
                var nodeID = edge.nodeFromID;
                edgeFromID.Add(nodeID);
            }
            
            await getNodeTitleWithID(edgeFromID, 1);
            await getNodeTitleWithID(edgeToID, 2);

        async Task getNodeTitleWithID(List<int> ids, int op) {
        //if op = 1, set nodes to
        //if op = 2, set nodes from
        if(op == 1) {
            foreach(int id in ids) {
                var nord = await Http.GetFromJsonAsync<NodeDTO>($"api/Node/{id}");
                edgeToString.Add(nord.title);
                Console.WriteLine("The title of node nord is: " + nord);
            }
        }

        if(op == 2) {
            foreach(int id in ids) {
                var nord = await Http.GetFromJsonAsync<NodeDTO>($"api/Node/{id}");
                edgeFromString.Add(nord.title);
                Console.WriteLine("The title of node nord is: " + nord);
            }
        }
    }
    }
   }
}

